
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="google-site-verification" content="DAAUlKcK8icZAJGD_fVMOwW0sPK35VIGdWC5UaJ8QoI" />
<meta name="viewport" content="width=device-width, initial-scale=1">

<meta name="description" content="Курс по документированию API. Вольный перевод курса https://idratherbewriting.com/learnapidoc/, составленного Томом Джонсоном, техническим писателем Amazon">
<meta name="keywords" content="документирование API, learnapidoc, rest api, docs-as-code, writethedocs, static site generator, apidocs, documenting rest api, publishing docs, endpoints, openapi, swagger, testing docs, тестирование документации">

<title>Описание и образцы кода | learnapidoc-ru</title>
<!--meta for opengraph-->
<meta property="og:title" content="Описание и образцы кода | learnapidoc-ru">
<meta property="og:description" content="Курс по документированию API. Вольный перевод курса https://idratherbewriting.comlearnapidoc/">
<meta property="og:image" content="https://starkovden.github.io/images/seo_image.png">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta property="og:type" content="article">
<meta property="og:url" content="https://starkovden.github.io/">
<meta property="og:site_name" content="Описание и образцы кода | learnapidoc-ru">
<meta property="fb:app_id" content="2450512671865811"/>
<!--meta for twitter-->
<meta property="twitter:card" content="summary_large_image">
<meta property="twitter:title" content="Описание и образцы кода | learnapidoc-ru">
<meta property="twitter:description" content="Курс по документированию API. Вольный перевод курса https://idratherbewriting.com/learnapidoc/">
<meta property="twitter:image" content="https://starkovden.github.io/images/seo_image.png">
<meta property="twitter:creator" content="starkovden">
<meta property="twitter:site" content="starkovden">
<meta property="twitter:url" content="https://starkovden.github.io/">
<!--meta for google-->
<meta itemprop="name" content="Описание и образцы кода | learnapidoc-ru">
<meta itemprop="description" content="Курс по документированию API. Вольный перевод курса https://idratherbewriting.comlearnapidoc">
<meta itemprop="image" content="https://starkovden.github.io/images/seo_image.png">
<meta property="author" content="Starkovden">
<link rel="stylesheet" href="css/syntax.css">
<!--meta for vk-->
<meta name="title" content="Описание и образцы кода | learnapidoc-ru">
<link rel="image_src" href="https://starkovden.github.io/images/seo_image.png">

<!-- Yandex.Metrika counter -->
<script type="text/javascript" >
   (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
   m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
   (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

   ym(55752835, "init", {
        clickmap:true,
        trackLinks:true,
        accurateTrackBounce:true
   });
</script>
<noscript><div><img src="https://mc.yandex.ru/watch/55752835" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
<!-- /Yandex.Metrika counter -->

<link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
<!--<link rel="stylesheet" type="text/css" href="css/bootstrap.min.css">-->
<link rel="stylesheet" href="css/modern-business.css">
<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
<link rel="stylesheet" href="css/customstyles.css">
<link rel="stylesheet" href="css/boxshadowproperties.css">
<!-- most color styles are extracted out to here -->
<link rel="stylesheet" href="css/theme-blue.css">

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-cookie/1.4.1/jquery.cookie.min.js"></script>
<script src="js/jquery.navgoco.min.js"></script>


<!-- Latest compiled and minified JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
<!-- Anchor.js -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/anchor-js/2.0.0/anchor.min.js"></script>
<script src="js/toc.js"></script>
<script src="js/customscripts.js"></script>

<link rel="shortcut icon" href="images/favicon.ico">

<!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
<script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
<script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
<![endif]-->

<link rel="alternate" type="application/rss+xml" title="Starkovden.github.io" href="https://starkovden.github.io/feed.xml">

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-149941550-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-149941550-1');
</script>

    <script>
        $(document).ready(function() {
            // Initialize navgoco with default options
            $("#mysidebar").navgoco({
                caretHtml: '',
                accordion: true,
                openClass: 'active', // open
                save: false, // leave false or nav highlighting doesn't work right
                cookie: {
                    name: 'navgoco',
                    expires: false,
                    path: '/'
                },
                slide: {
                    duration: 400,
                    easing: 'swing'
                }
            });

            $("#collapseAll").click(function(e) {
                e.preventDefault();
                $("#mysidebar").navgoco('toggle', false);
            });

            $("#expandAll").click(function(e) {
                e.preventDefault();
                $("#mysidebar").navgoco('toggle', true);
            });

        });

    </script>
    <script>
        $(function () {
            $('[data-toggle="tooltip"]').tooltip()
        })
    </script>
    <script>
        $(document).ready(function() {
            $("#tg-sb-link").click(function() {
                $("#tg-sb-sidebar").toggle();
                $("#tg-sb-content").toggleClass('col-md-9');
                $("#tg-sb-content").toggleClass('col-md-12');
                $("#tg-sb-icon").toggleClass('fa-toggle-on');
                $("#tg-sb-icon").toggleClass('fa-toggle-off');
            });
        });
    </script>
    

</head>
<body>
<!-- Navigation -->
<nav class="navbar navbar-inverse navbar-static-top">
    <div class="container topnavlinks">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="fa fa-home fa-lg navbar-brand" href="index.html">&nbsp;<span class="projectTitle"> Курс по документированию API</span></a>
        </div>
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
            <ul class="nav navbar-nav navbar-right">
                <!-- toggle sidebar button -->
                <li><a id="tg-sb-link" href="#"><i id="tg-sb-icon" class="fa fa-toggle-on"></i> Nav</a></li>
                <!-- entries without drop-downs appear here -->




                
                
                
                <li><a href="https://github.com/Starkovden/Starkovden.github.io" target="_blank" rel="noopener">GitHub</a></li>
                
                
                
                <li><a href="https://idratherbewriting.com/learnapidoc/" target="_blank" rel="noopener">Original course</a></li>
                
                
                
                <!-- entries with drop-downs appear here -->
                <!-- conditional logic to control which topnav appears for the audience defined in the configuration file.-->
                
                
			<li>



  <a class="email" title="Submit feedback" href="#" onclick="javascript:window.location='mailto:starkovden@gmail.com?subject=Jekyll documentation theme feedback&body=I have some feedback about the Описание и образцы кода page: ' + window.location.href;"><i class="fa fa-envelope-o"></i> Feedback</a>

</li>

		
                <!--comment out this block if you want to hide search-->
                <li>
                    <!--start search-->
                    <div id="search-demo-container">
                        <input type="text" id="search-input" placeholder="">
                        <ul id="results-container"></ul>
                    </div>
                    <script src="js/jekyll-search.js" type="text/javascript"></script>
                    <script type="text/javascript">
                            SimpleJekyllSearch.init({
                                searchInput: document.getElementById('search-input'),
                                resultsContainer: document.getElementById('results-container'),
                                dataSource: 'search.json',
                                searchResultTemplate: '<li><a href="{url}" title="Описание и образцы кода">{title}</a></li>',
                    noResultsText: '',
                            limit: 10,
                            fuzzy: true,
                    })
                    </script>
                    <!--end search-->
                </li>
            </ul>
        </div>
        </div>
        <!-- /.container -->
</nav>

<!-- Page Content -->
<div class="container">
  <div id="main">
    <!-- Content Row -->
    <div class="row">
        
        
            <!-- Sidebar Column -->
            <div class="col-md-3" id="tg-sb-sidebar">
                

<ul id="mysidebar" class="nav">
  <li class="sidebarTitle">Learnapidoc-ru 2.0</li>
  
  
  
      
  
  <li>
      <a href="#">Release notes</a>
      <ul>
          
          
          
          <li><a href="release-notes.html">Release notes</a></li>
          
          
          
          
      </ul>
   </li>
     
      
  
  <li>
      <a href="#">Введение в REST API</a>
      <ul>
          
          
          
          <li><a href="about-first-module.html">О модуле</a></li>
          
          
          
          
          
          
          <li><a href="index.html">Коротко о курсе</a></li>
          
          
          
          
          
          
          <li><a href="course-overview.html">Обзор курса</a></li>
          
          
          
          
          
          
          <li><a href="what-for-this-course.html">Для чего этот курс</a></li>
          
          
          
          
          
          
          <li><a href="about-the-author.html">Об авторе курса</a></li>
          
          
          
          
          
          
          <li><a href="intro-rest-api.html">Знакомство с документацией REST API</a></li>
          
          
          
          
          
          
          <li><a href="what-is-rest-api.html">Что такое REST API</a></li>
          
          
          
          
          
          
          <li><a href="video-presentations.html">Видео презентации</a></li>
          
          
          
          
          
          
          <li><a href="course-slides.html">Презентации курса</a></li>
          
          
          
          
          
          
          <li><a href="workshop-activities.html">Практические занятия</a></li>
          
          
          
          
          
          
          <li><a href="identify-goals.html">Практика "Определение цели"</a></li>
          
          
          
          
      </ul>
   </li>
     
      
  
  <li>
      <a href="#">Используем API как разработчики</a>
      <ul>
          
          
          
          <li><a href="about-second-module.html">О модуле</a></li>
          
          
          
          
          
          
          <li><a href="using-api-scenario.html">Сценарий использования API сервиса прогноза погоды</a></li>
          
          
          
          
          
          
          <li><a href="get-authorization-keys.html">Получение ключей авторизации</a></li>
          
          
          
          
          
          
          <li><a href="submit-requests-postman.html">Отправка запросов в Postman</a></li>
          
          
          
          
          
          
          <li><a href="curl-intro-and-instalation.html">Введение и установка curl</a></li>
          
          
          
          
          
          
          <li><a href="make-curl-call.html">Создание curl запроса</a></li>
          
          
          
          
          
          
          <li><a href="understand-curl.html">Понимание curl</a></li>
          
          
          
          
          
          
          <li><a href="use-methods-with-curl.html">Использование методов с curl</a></li>
          
          
          
          
          
          
          <li><a href="analyze-json-response.html">Анализ JSON ответов</a></li>
          
          
          
          
          
          
          <li><a href="inspect-json.html">Изучение полезных данных JSON ответа</a></li>
          
          
          
          
          
          
          <li><a href="access-print-value.html">Доступ и вывод на страницу определенного значения JSON</a></li>
          
          
          
          
          
          
          <li><a href="dot-notation.html">Погружение в точечную нотацию</a></li>
          
          
          
          
      </ul>
   </li>
     
      
  
  <li>
      <a href="#">Документирование конечных точек</a>
      <ul>
          
          
          
          <li><a href="about-third-module.html">О модуле</a></li>
          
          
          
          
          
          
          <li><a href="new-endpoint.html">Документирование новой конечной точки</a></li>
          
          
          
          
          
          
          <li><a href="api-reference-tutorial-overview.html">Обзор пошагового описания API ссылки</a></li>
          
          
          
          
          
          
          <li><a href="step1-resourse-description.html">Шаг 1 "Описание ресурса"</a></li>
          
          
          
          
          
          
          <li><a href="step2-endpoints-and-methods.html">Шаг 2 "Конечные точки и методы"</a></li>
          
          
          
          
          
          
          <li><a href="step3-parameters.html">Шаг 3 "Параметры"</a></li>
          
          
          
          
          
          
          <li><a href="step4-request-example.html">Шаг 4 "Пример запроса"</a></li>
          
          
          
          
          
          
          <li><a href="step5-response-example-and-schema.html">Шаг 5 "Пример и схема ответа"</a></li>
          
          
          
          
          
          
          <li><a href="putt-all-together.html">Собираем все вместе</a></li>
          
          
          
          
          
          
          <li><a href="whats-wrong.html">Практическое занятие "Что не так в разделе API?"</a></li>
          
          
          
          
          
          
          <li><a href="find-open-source-project.html">Практическое занятие "Поиск open-source проекта"</a></li>
          
          
          
          
          
          
          <li><a href="evaluate-api-referense-docs.html">Практическое занятие "Оценка ключевых элементов API документации"</a></li>
          
          
          
          
      </ul>
   </li>
     
      
  
  <li>
      <a href="#">Спецификация OpenAPI и Swagger</a>
      <ul>
          
          
          
          <li><a href="about-fourth-module.html">О модуле</a></li>
          
          
          
          
          
          
          <li><a href="overview-specification-formats.html">Обзор форматов спецификаций REST API</a></li>
          
          
          
          
          
          
          <li><a href="introduction-openapi-and-swagger.html">Знакомство со спецификациями OpenAPI и Swagger</a></li>
          
          
          
          
          
          
          <li><a href="working-in-YAML.html">Работа в YAML</a></li>
          
          
          
          
          
          
          <li><a href="openapi-tutorial-overview.html">Обзор руководства OpenAPI 3.0</a></li>
          
          
          
          
          
          
          <li><a href="step1-openapi-object.html">Шаг 1 "Объект openapi"</a></li>
          
          
          
          
          
          
          <li><a href="step2-info-object.html">Шаг 2 "Объект info"</a></li>
          
          
          
          
          
          
          <li><a href="step3-servers-object.html">Шаг3 "Объект servers"</a></li>
          
          
          
          
          
          
          <li><a href="step4-paths-object.html">Шаг 4 "Объект paths"</a></li>
          
          
          
          
          
          
          <li><a href="step5-components-object.html">Шаг 5 "Объект components"</a></li>
          
          
          
          
          
          
          <li><a href="step6-security-object.html">Шаг 6 "Объект security"</a></li>
          
          
          
          
          
          
          <li><a href="step7-tags-object.html">Шаг 7 "Объект tags"</a></li>
          
          
          
          
          
          
          <li><a href="step8-externalDocs-object.html">Шаг 8 "Объект externalDocs"</a></li>
          
          
          
          
          
          
          <li><a href="create-openapi-specification.html">Практическое занятие "Создание спецификации OpenAPI"</a></li>
          
          
          
          
          
          
          <li><a href="swagger-ui-tutorial.html">Руководство Swagger UI</a></li>
          
          
          
          
          
          
          <li><a href="swagger-ui-demo.html">Демо Swagger UI</a></li>
          
          
          
          
          
          
          <li><a href="swaggerhub-introduction-and-tutorial.html">Введение и руководство SwaggerHub</a></li>
          
          
          
          
          
          
          <li><a href="stoplight.html">Stoplight</a></li>
          
          
          
          
          
          
          <li><a href="integrating-swagger-with-docs.html">Интеграция Swagger с документацией</a></li>
          
          
          
          
      </ul>
   </li>
     
      
  
  <li>
      <a href="#">Тестирование документации</a>
      <ul>
          
          
          
          <li><a href="about-fifth-module.html">О модуле</a></li>
          
          
          
          
          
          
          <li><a href="overview-testing.html">Обзор тестирования документации</a></li>
          
          
          
          
          
          
          <li><a href="set-up-test-environment.html">Настройка тестовой среды окружения</a></li>
          
          
          
          
          
          
          <li><a href="test-instructions-yourself.html">Самостоятельное тестирование всех инструкций</a></li>
          
          
          
          
          
          
          <li><a href="test-assumptions.html">Тестирование предположений</a></li>
          
          
          
          
          
          
          <li><a href="test-documentation.html">Практическое занятие "Тестирование документации проекта"</a></li>
          
          
          
          
      </ul>
   </li>
     
      
  
  <li>
      <a href="#">Концептуальные разделы</a>
      <ul>
          
          
          
          <li><a href="about-sixth-module.html">О модуле</a></li>
          
          
          
          
          
          
          <li><a href="user-guide-topics.html">Разделы руководства пользователя</a></li>
          
          
          
          
          
          
          <li><a href="API-overview.html">Обзор API</a></li>
          
          
          
          
          
          
          <li><a href="getting-started.html">Руководство по началу работы с API</a></li>
          
          
          
          
          
          
          <li><a href="authentication-and-authorization.html">Требования аутентификации и авторизации API</a></li>
          
          
          
          
          
          
          <li><a href="status-error-codes.html">Коды ошибок и статусы</a></li>
          
          
          
          
          
          
          <li><a href="rate-limiting.html">Ограничения скорости</a></li>
          
          
          
          
          
          
          <li><a href="sdks-sample-apps.html">SDK и пример приложений</a></li>
          
          
          
          
          
          
          <li><a href="quick-reference-guide.html">Краткое справочное руководство</a></li>
          
          
          
          
          
          
          <li><a href="api-glossary.html">API Глоссарий</a></li>
          
          
          
          
          
          
          <li><a href="best-practices.html">Лучшие практики (Best practices) API</a></li>
          
          
          
          
          
          
          <li><a href="assess-conceptual-content.html">Практическое занятие "Оценка концептуального контента в проекте"</a></li>
          
          
          
          
      </ul>
   </li>
     
      
  
  <li>
      <a href="#">Документация кода</a>
      <ul>
          
          
          
          <li><a href="about-eleventh-module.html">О модуле</a></li>
          
          
          
          
          
          
          <li><a href="common-parts.html">Общие черты документации кода</a></li>
          
          
          
          
          
          
          <li><a href="doc-code.html">Почему так трудно документировать код?</a></li>
          
          
          
          
          
          
          <li><a href="doc-research.html">Исследования о документировании кода</a></li>
          
          
          
          
          
          
          <li><a href="doc-strategy.html">Пять стратегий документирования кода</a></li>
          
          
          
          
          
          
          <li class="active"><a href="code-samples.html">Описание и образцы кода</a></li>
          
          
          
          
          
          
          <li><a href="sample-apps.html">Образцы приложений</a></li>
          
          
          
          
      </ul>
   </li>
     
      
  
  <li>
      <a href="#">Публикация документации</a>
      <ul>
          
          
          
          <li><a href="about-seventh-module.html">О модуле</a></li>
          
          
          
          
          
          
          <li><a href="Overview-for-publishing.html">Варианты публикации документации</a></li>
          
          
          
          
          
          
          <li><a href="API-doc-sites-list.html">Список из 100 сайтов с API документацией</a></li>
          
          
          
          
          
          
          <li><a href="Design-patterns.html">Шаблоны проектирования сайтов API документации</a></li>
          
          
          
          
          
          
          <li><a href="Doc-as-code-tools.html">Инструменты подхода Docs-as-code</a></li>
          
          
          
          
          
          
          <li><a href="More-about-Markdown.html">Подробнее о Markdown</a></li>
          
          
          
          
          
          
          <li><a href="Version-control-system.html">Система контроля версий (пример Git)</a></li>
          
          
          
          
          
          
          <li><a href="scrum-and-doc.html">Scrum и документация</a></li>
          
          
          
          
          
          
          <li><a href="Manage-wiki-content.html">Практическое занятие "Управляем контентом в Wiki Github"</a></li>
          
          
          
          
          
          
          <li><a href="Use-GitHub-Desktop.html">Практическое занятие "Используем клиент GitHub для десктопа"</a></li>
          
          
          
          
          
          
          <li><a href="Pull-request-workflows.html">Практическое занятие "процесс Pull request на GitHub"</a></li>
          
          
          
          
          
          
          <li><a href="Static-site-generators.html">Генераторы статичных сайтов</a></li>
          
          
          
          
          
          
          <li><a href="Hosting-and-deployment-options.html">Варианты хостинга и развертывания</a></li>
          
          
          
          
          
          
          <li><a href="Headless-cms-options.html">Возможности автономных CMS (и Readme.io)</a></li>
          
          
          
          
          
          
          <li><a href="Which-tool-choose.html">Рекомендации выбора инструментов документирования</a></li>
          
          
          
          
          
          
          <li><a href="Jekyll-and-cloudCannon.html">Непрерывное развертывание Jekyll и CloudCannon</a></li>
          
          
          
          
          
          
          <li><a href="Switching-tools.html">Кейс для изучения "Переход на Docs-as-code"</a></li>
          
          
          
          
      </ul>
   </li>
     
      
  
  <li>
      <a href="#">Работа технического писателя</a>
      <ul>
          
          
          
          <li><a href="about-eigth-module.html">Работа технического писателя</a></li>
          
          
          
          
          
          
          <li><a href="job-market.html">Квалификация технического писателя</a></li>
          
          
          
          
          
          
          <li><a href="how-much-code-to-know.html">Сколько кода нужно знать?</a></li>
          
          
          
          
          
          
          <li><a href="best-locations.html">Лучшие локации для работы</a></li>
          
          
          
          
      </ul>
   </li>
     
      
  
  <li>
      <a href="#">Нативные библиотеки API</a>
      <ul>
          
          
          
          <li><a href="about-ninth-module.html">О модуле</a></li>
          
          
          
          
          
          
          <li><a href="Overview-of-library.html">Обзор нативных библиотек API</a></li>
          
          
          
          
          
          
          <li><a href="Get-the-sample-Java-project.html">Получаем пример Java проекта</a></li>
          
          
          
          
          
          
          <li><a href="Java-crash-course.html">Ускоренный курс Java</a></li>
          
          
          
          
          
          
          <li><a href="Activity-Generate-Javadoc.html">Практическое занятие "Генерация Javadoc из примера проекта"</a></li>
          
          
          
          
          
          
          <li><a href="Javadoc-tags.html">Тэги Javadoc</a></li>
          
          
          
          
          
          
          <li><a href="Explore-Javadoc-output.html">Изучение вывода Javadoc</a></li>
          
          
          
          
          
          
          <li><a href="Make-edits-Javadocs-tags.html">Редактирование тэгов Javadoc</a></li>
          
          
          
          
          
          
          <li><a href="Doxygen.html">Doxygen, генератор документации в основном для С++</a></li>
          
          
          
          
          
          
          <li><a href="Create-non-refsdocs-with-native-library-APIs.html">Создание концептуальной документации при помощи исходных библиотек API</a></li>
          
          
          
          
      </ul>
   </li>
     
      
  
  <li>
      <a href="#">Глоссарий API и источники</a>
      <ul>
          
          
          
          <li><a href="about-tenth-module.html">О модуле</a></li>
          
          
          
          
          
          
          <li><a href="Glossary-for-API-documentation.html">Глоссарий</a></li>
          
          
          
          
          
          
          <li><a href="RESTAPI-activities.html">Практические занятия REST API</a></li>
          
          
          
          
          
          
          <li><a href="Get-event-information-using-Eventbrite-API.html">Практическое занятие "Получаем информацию о событии, используя API сервиса Eventbrite"</a></li>
          
          
          
          
          
          
          <li><a href="Retrieve-gallery-using-Flickr-API.html">Практическое занятие "Извлекаем галерею, используя API сервиса Flickr"</a></li>
          
          
          
          
          
          
          <li><a href="Get-wind-speed-using-Aeris-API.html">Практическое занятие "Получаем скорость ветра, используя API сервиса Aeris Weather"</a></li>
          
          
          
          
          
          
          <li><a href="RAML-tutorial.html">Справочник RAML</a></li>
          
          
          
          
          
          
          <li><a href="API-Blueprint-tutorial.html">Справочник API Blueprint</a></li>
          
          
          
          
          
          
          <li><a href="answeres-whats-wrong.html">Описание ошибок</a></li>
          
          
          
          
      </ul>
   </li>
     
      
      
      <!-- if you aren't using the accordion, uncomment this block:
         <p class="external">
             <a href="#" id="collapseAll">Collapse All</a> | <a href="#" id="expandAll">Expand All</a>
         </p>
         -->
</ul>

<!-- this highlights the active parent class in the navgoco sidebar. this is critical so that the parent expands when you're viewing a page. This must appear below the sidebar code above. Otherwise, if placed inside customscripts.js, the script runs before the sidebar code runs and the class never gets inserted.-->
<script>$("li.active").parents('li').toggleClass("active");</script>

<!-- uSocial -->
<script async src="https://usocial.pro/usocial/usocial.js?v=6.1.4" data-script="usocial" charset="utf-8"></script>
<div class="uSocial-Share" data-pid="fdc5d41a92fb39393a82148253b0ddff" data-type="share" data-options="round-rect,style1,default,left,slide-down,size24,eachCounter1,eachCounter-bottom,counter0" data-social="fb,vk,twi,lin,telegram" data-mobile="wa"></div>
<!-- /uSocial -->

            </div>
            
        

        <!-- Content Column -->
        <div class="col-md-9" id="tg-sb-content">
            <div class="post-header">
   <h1 class="post-title-main">Описание и образцы кода</h1>
</div>



<div class="post-content">

   

    
    
<!-- this handles the automatic toc. use ## for subheads to auto-generate the on-page minitoc. if you use html tags, you must supply an ID for the heading element in order for it to appear in the minitoc. -->
<script>
$( document ).ready(function() {
  // Handler for .ready() called.

$('#toc').toc({ minimumHeaders: 0, listType: 'ul', showSpeed: 0, headers: 'h2,h3,h4' });

/* this offset helps account for the space taken up by the floating toolbar. */
$('#toc').on('click', 'a', function() {
  var target = $(this.getAttribute('href'))
    , scroll_target = target.offset().top

  $(window).scrollTop(scroll_target - 10);
  return false
})
  
});
</script>

<div id="toc"></div>

    


    

    <a target="_blank" rel="noopener" href="https://github.com/Starkovden/Starkovden.github.io/tree/test/pages/doc-code/code-samples.md" class="btn btn-default githubEditButton" role="button"><i class="fa fa-github fa-lg"></i> Edit me</a>

    

   <p>У документации для разработчиков есть тенденция включать большое количество примеров кода. Примеры кода могут быть не включены в конечные точки, которые документируются. Но по мере того, как будут создаваться задачи и более сложные рабочие процессы, касающиеся того, как использовать API для достижения различных целей, будут использоваться разные конечные точки в которых будет указываться, как решать различные сценарии. Руководства по коду являются важной частью руководства пользователя.</p>

<p><a name="candy"></a></p>
<h2 id="образцы-кода---конфета-для-разработчика">Образцы кода - конфета для разработчика</h2>

<p>Образцы кода играют важную роль, помогая разработчикам использовать API. Код является другим языком, и когда пользователи, использующие этот язык, видят его, они получают гораздо больше, чем от простого текста (каким бы хорошим ни было описание).</p>

<figure><img class="docimage" src="images/conceptual-topic/34.jpg" alt="sample" /><figcaption>Код написан на другом языке, поэтому, как ни стараться описать общение на таком другом языке с помощью текста, все часто оказывается неэффективным. Разработчики понимают код гораздо лучше, чем текст</figcaption></figure>

<p>В ходе пользовательского тестирования документации, проведенного Twilio, было обнаружено, что страницы, имеющие примеры кода, удобнее пользователям.</p>

<figure><a class="no_icon" target="_blank" href="https://eventil.com/talks/PPSznP-jarod-reyes-how-twilio-writes-documentation"><img class="docimage" src="images/conceptual-topic/35.png" alt="youtube" /></a><figcaption>В Twilio обнаружили, что когда у страниц было меньше предложений перед примерами кода, страницы привлекали пользователей больше</figcaption></figure>

<p>В частности, страницы с менее чем 4 предложениями перед примерами кода выполняются дважды также, как и страницы с 11 предложениями перед примерами кода. Jarod Reyes объясняет:</p>

<blockquote>
  <p>Дело больше в умственном блоке, чем в неспособности видеть код. Текст сообщает разработчику, что этой странице есть, что сказать, и что у него (разработчика) много работы. Разработчики не будут тратить время на чтение того, что вы хотите сказать. Мы видели это по всем разделам; мы видели это на всех страницах. Всякий раз, когда на странице много прозы и не так много кода, такая страница хорошо не работает. (<a href="https://eventil.com/talks/PPSznP-jarod-reyes-how-twilio-writes-documentation">Как Twilio пишет документацию</a>)</p>
</blockquote>

<p>Другими словами, когда разработчики видят код, это равносильно просмотру темы, основанной на задачах, в руководстве пользователя - код указывает конкретное действие, которое должен предпринять разработчик, что привлекает внимание разработчиков.</p>

<p><a name="refs"></a></p>
<h2 id="дело-не-только-в-адресной-документации">Дело не только в адресной документации</h2>

<p>Иногда разработчики хотят избегать включения примеров кода в документы API, поскольку считают, что адресная документация по конечным точкам содержит всю информацию, необходимую разработчикам. Однако эта точка зрения часто недальновидна. В статье о программируемой сети под названием <a href="https://www.programmableweb.com/news/six-pillars-complete-developer-documentation/2011/09/12">Шесть столпов полной документации для разработчиков</a> авторы объясняют:</p>

<blockquote>
  <p>В то время как руководство разработчика должно помочь понять основные принципы использования API и его функциональных возможностей, оно не может охватить все возможные варианты использования этого API согласованным образом. Именно здесь появляются статьи и учебные пособия, чтобы научить разработчиков касательно или специализированному использованию API, например сочетать его с другим сервисом, фреймворком или API.</p>
</blockquote>

<p>Другими словами, статьи и учебные пособия дополняют адресную документацию для предоставления полной инструкции. Примеры кода, которые показывают, как использовать различные конечные точки для достижения цели, занимают важное место в руководстве пользователя.</p>

<p>Кроме того, даже если включать примеры кода, уровень детализации и объяснения также может быть спорным. Многие разработчики предполагают, что аудитория имеет набор навыков, схожий с их собственным, без признания различных специализаций разработчиков. И поэтому они добавят пример кода, но не будут давать никаких объяснений по этому поводу. Внутренние разработчики часто говорят: «Если пользователь не понимает этот код, то и использовать наш API не стоит».</p>

<p>Если вы сталкиваетесь с таким отношением, напомните разработчикам, что пользователи часто имеют технические знания в разных областях. Например, пользователь может быть экспертом по Java, но только слегка знаком с JavaScript. Кто-то, кто является программистом базы данных, будет иметь другой набор навыков, чем тот, кто является программистом Python, у которого будет другой набор навыков и т.д. Учитывая эти различия и вероятную вероятность того, что у вас будет много начинающих (или незнакомых) пользователей, необходимы более обширные учебные руководства и пояснения.</p>

<p><a name="why"></a></p>
<h2 id="фокус-на-почему-а-не-что">Фокус на “Почему?” а не “Что?”</h2>

<p>Как только у вас появятся примеры кода в документации появится и вопрос: “как их документировать?” Пользовательские интерфейсы имеют четкие задачи - кнопки для нажатия, линейные рабочие процессы и т.д. Но документирование кода может быть более сложным. Стоит запомнить основной принцип: в любом примере кода надо сосредоточиться на вопросе «почему?», а не «что?». Нужно пояснить, почему вы делаете то, что делаете, а не подробно описывать то, что происходит, особенно когда вопрос “что?” относится к стандартной механике программирования, которая не уникальна для вашего API.</p>

<p>Например, вот разница:</p>

<ul>
  <li><strong>ЧТО?</strong>: “В этом коде несколько аргументов передаются в метод jQuery <code class="language-plaintext highlighter-rouge">ajax</code>. Ответ присваивается аргументу данных функции обратного вызова, что в данном случае является <code class="language-plaintext highlighter-rouge">success</code>”;</li>
  <li><strong>ПОЧЕМУ?</strong>: “Используйте метод <code class="language-plaintext highlighter-rouge">ajax</code> из jQuery, потому что он разрешает асинхронные ответы, которые не будут блокировать загрузку вашей страницы.”</li>
</ul>

<p>Разработчики, не знакомые с общим кодом, не связанным с вашей компанией (например, метод <code class="language-plaintext highlighter-rouge">.ajax()</code> из jQuery), должны обратиться к внешним источникам для получения руководств по этому коду. Не стоит писать свою собственную версию документации для другого языка программирования или сервиса. Вместо этого лучше сосредоточиться на частях кода, уникальных для своей компании. В остальном пусть разработчик полагается на другие источники (не стесняйтесь вставлять ссылки на другие сайты).</p>

<p><a name="comments"></a></p>
<h2 id="добавляем-комментарии-к-коду-и-пояснения-до-и-после">Добавляем комментарии к коду и пояснения “до и после”</h2>

<p>Документация кода должна сочетать комментарии кода с некоторыми пояснениями до или после примера кода. Разные языки имеют разные обозначения комментариев, но, как правило, краткие комментарии к коду выделяются косой чертой <code class="language-plaintext highlighter-rouge">//</code> в коде; более длинные комментарии выделяются между слешами и звездочками, например: <code class="language-plaintext highlighter-rouge">/ * .... * /</code>.</p>

<p>Комментарии в коде обычно представляют собой короткие однострочные заметки, которые появляются после каждых 5-10 строк кода. Можно дополнить код более подробными объяснениями в своей документации, но лучше всего разбавить примеры кода комментариями, потому что он помещает объяснение рядом с кодом, выполняющим действие. Такой подход добавления кратких комментариев в коде, сопровождаемый более здравыми объяснениями после кода, согласуется с принципами <a href="https://idratherbewriting.com/2012/08/09/applying-progressive-information-disclosure-to-online-help-navigation/">постепенного раскрытия информации</a>, которое помогает как опытным, так и начинающим типам пользователей. В этом случае постепенное раскрытие информации означает, что вы предоставляете некоторые подробности в контексте действия, а затем добавляете ссылки для получения дополнительной информации, если это необходимо пользователю.</p>

<p>Разве не будет несколько избыточным писать комментарии, перемежающиеся в коде, а также в разделах до или после кода? На самом деле, нет. Некоторые исследования о том, как разработчики используют документацию, обнаружили, что существует два распространенных поведения: разработчики, которые начинают с кода и читают концептуальную документацию высокого уровня только по мере необходимости (так называемое «оппортунистическое» поведение). И разработчики, которые начинают с концептуальной документации более высокого уровня, прежде чем переходить к коду (так называемое «систематическое» поведение). Майкл Мэн, Стефани Штайнхардт и Андреас Шуберт объясняют:</p>

<blockquote>
  <p>Как только сформировалось понимание уровня и функций API, появились два разных пути, которые очень похожи на «систематических» и «оппортунистических» личностей разработчиков, описанных Clarke (2007) (см. Также Stylos, 2009). По словам Кларка (2007), систематические разработчики работают сверху вниз в том смысле, что они пытаются глубже понять систему в целом, прежде чем переходить к отдельным компонентам. С другой стороны, цели обучения оппортунистических разработчиков уже сфокусированы на решении конкретной проблемы и зависят от конкретных проблем и блокировщиков, с которыми они сталкиваются при работе над решением (“Документация интерфейса прикладного программирования: чего хотят разработчики программного обеспечения?: технического письма и коммуникации”. 2018, том 48 (3) 295–330. <a href="https://www.researchgate.net/publication/318733467_Application_Programming_Interface_Documentation_What_Do_Software_Developers_Want">ResearchGate</a>)</p>
</blockquote>

<p>Для оппортунистического разработчика, который сначала запускает код, комментарии в коде могут быть полезнее документации.  Но не все начинают с кода. Некоторые предпочитают сначала читать документацию.</p>

<p>Дополнительные сведения о том, как документировать код, см. В статье «Когда не следует комментировать: вопросы и компромиссы с документацией API для проектов C ++», написанной Эндрю Хедом, Кейтлин Садовски, Эмерсоном Мерфи-Хиллом и Андреа Найт (2018 ACM / IEEE 40-я Международная конференция по Программная инженерия. <a href="https://www.researchgate.net/publication/325732077_When_not_to_comment_questions_and_tradeoffs_with_API_documentation_for_C_projects">ResearchGate</a>). Исследователи выясняют, где более склонны искать разработчики: в верхнеуровневых файлах (где появляются более формальные описания класса и методов) или в коде реализации документации (они сосредоточены на C ++). В некоторых случаях чтение кода реализации напрямую обеспечивает более ясный путь к пониманию для разработчиков. Кроме того, некоторые разработчики не доверяют актуальности документации и поэтому предпочитают смотреть на код напрямую. Однако для более сложного кода было полезно учиться на более сложной документации верхнеуровневых файлов.</p>

<p>В целом, программисты могут читать код по-разному. Но, как показывают исследования, было бы неплохо включать комментарии непосредственно в код, а также давать более формальные объяснения вне кода. Если разработчики дают кусок кода, в котором есть комментарии, не стоит думать, что комментарии кода каким-то образом отделены от документации или находятся за пределами руководства технического писателя. Стоит подумать о комментариях в коде как об эквивалентной контекстной справке в пользовательском интерфейсе - во многих отношениях это может быть наиболее читаемый контент из всех.</p>

<p><a name="simple"></a></p>
<h2 id="делаем-примеры-кода-простыми">Делаем примеры кода простыми</h2>

<p>Примеры кода должны быть сокращены до их самой простой формы. Предоставление кода для всей HTML-страницы, вероятно, не требуется. Но включение некоторого окружающего кода никому не повредит, а для новичков может помочь им увидеть общую картину. (Также легче копировать и вставлять.)</p>

<p>Кроме того, избегайте включения большого количества стилей или других деталей в код, которые потенциально отвлекут аудиторию от основного момента. Чем минималистичнее пример кода, тем лучше. Например, если вы демонстрируете простую функцию JavaScript, у вас может возникнуть желание поддержать ее с помощью тщательно разработанного стиля CSS, чтобы демонстрация выглядела четко. Тем не менее, весь дополнительный CSS будет только вносить больше сложности и путаницы, которые конкурируют с оригинальным принципом, который вы пытаетесь показать с примером кода.</p>

<p>Когда разработчики интегрируют код в производственную среду, они, вероятно, внесут какие-то изменения, учитывая масштабирование, многопоточность и эффективность, а также другие факторы производственного уровня.</p>

<p><a name="copypaste"></a></p>
<h2 id="делаем-удобные-примеры-кода-для-копипасты">Делаем удобные примеры кода для “копипасты”</h2>

<p>Часто разработчики копируют и вставляют код непосредственно из документации в свое приложение. После чего правят его под свои конкретные параметры или методы.</p>

<p>Если предполагается, что пользователи будут так поступать с кодом, нужно убедиться, что он работает. Например, в описании на сайте API Ajax, параметр <code class="language-plaintext highlighter-rouge">dataType</code> был записан как <code class="language-plaintext highlighter-rouge">datatype</code>. В результате код не работал (он возвращал ответ в виде текста, а не JSON). Потребовалось около 30 минут для устранения неполадок, прежде чем обратились к <a href="http://api.jquery.com/jquery.ajax/">методу <code class="language-plaintext highlighter-rouge">ajax</code></a> и поняли, что это должен быть тип данных с большой буквы <code class="language-plaintext highlighter-rouge">T</code>.</p>

<p>В идеале, нужно протестировать все примеры кода самостоятельно (или внедрить более надежный процесс для тестирования кода). Тестирование позволяет выявлять ошибки, понимать, являются ли все параметры полными и действительными, и многое другое. В видео от Twilio авторы говорят, что они хотели обрабатывать примеры кода в документации как их другой инженерный код, поэтому они хранили свой код в отдельном контейнере (также помещенном в GitHub) для выполнения регулярных тестов. Они вставили код в свою документацию. Для длинных примеров кода можно рассмотреть возможность хранения кода на GitHub. Таким образом, инженеры могут легче тестировать его как часть своих тестов для каждого выпуска. Иногда, когда блоки кода скрываются в документации, они теряются в новых релизах.</p>

<p><a name="lang"></a></p>
<h2 id="предоставляем-образец-на-целевом-языке">Предоставляем образец на целевом языке</h2>

<p>REST API позволяет разработчикам использовать практически любой язык программирования для выполнения запроса. Неизбежно возникнет один вопрос: следует ли показывать примеры кода, охватывающие несколько языков? Если да, сколько языков?</p>

<p>Предоставление примеров кода - это хорошо, поэтому, если есть пропускная способность для отображения примеров кода на разных языках, нужно этим пользоваться. Достаточно предоставлять только один пример кода на целевом языке аудитории. Если для большинства пользователей не существует стандартного языка, можно просто предоставить примеры curl в документации, а затем предлагать пользователям <a href="submit-requests-postman.html">коллекции Postman</a> или <a href="introduction-openapi-and-swagger.html">файл спецификации OpenAPI</a> - оба эти подхода позволят разработчикам создавать примеры кода в много разных языков.</p>

<p>Каждый пример предоставленного кода должен быть протестирован. При обновлении API, нужно будет обновлять каждый из примеров кода на используемых языках. Когда API выдвигает новую версию, нужно проверять все примеры кода, чтобы убедиться, что код не нарушает изменения в новой версии (это называется «регрессионное тестирование» на языке QA).</p>

<p>Включение большого количества примеров кода увеличивает объем работы тестирования и обслуживания, но, с другой стороны, примеры кода -  наиболее полезный тип контента для пользователей.</p>

<p><a name="samples"></a></p>
<h2 id="примеры-описания-кода">Примеры описания кода</h2>

<p>Ниже приведены несколько примеров разделов с примерами кода в документации API.</p>

<p><a name="weather"></a></p>
<h3 id="weather-underground">Weather Underground</h3>

<figure><img class="docimage" src="images/conceptual-topic/36.png" alt="weather" /><figcaption>Примеры кода Weather Underground</figcaption></figure>

<p>В этом примере Weather Underground есть несколько примеров кода на нескольких языках, но нет объяснения того, что возвращает пример кода. В этом случае код, достаточно прост, чтобы разработчики могли посмотреть на него и понять из самого кода, что происходит. Тем не менее, некоторые объяснения обычно оправданы, особенно если есть несколько способов сделать запрос.</p>

<p>Иногда разработчики могу говорить, что код «самодокументируется», то есть из самого кода видно, что происходит. Без знания языка программирования трудно оценить это утверждение. Если столкнуться с таким выражением, нужно рассмотреть возможность проверки этого утверждения у других разработчиков, особенно вне группы разработчиков продукта (или с пользователями, если к ним есть доступ).</p>

<p><a name="eventful"></a></p>
<h3 id="eventful">Eventful</h3>

<figure><img class="docimage" src="images/conceptual-topic/37.png" alt="Eventful" /><figcaption>Код Eventful</figcaption></figure>

<p>Здесь не видно примеров кода, но документы Eventful содержат различные примеры параметров строки запроса для конечных точек. Хотя эти параметры также определены в их <a href="http://api.eventful.com/docs/events/search">справочной документации для конечной точки поиска</a>, этот раздел раскрывает, как использовать параметры более удобным и подробным способом.</p>

<p>У Eventful хорошее описание в разделе, оно показывает, как документация, которая обычно содержится в справочном материале, может быть извлечена и объяснена более подробно с помощью примеров. Это показывает больше разницы между справочной и учебной информацией.</p>

<p><a name="twilio"></a></p>
<h3 id="twilio">Twilio</h3>

<figure><img class="docimage" src="images/conceptual-topic/38.png" alt="twilio" /><figcaption>Коды Twilio</figcaption></figure>

<p>Раздел “Примеры кода” Twilio, пожалуй, самый впечатляющий и имеет самые подробные описания из приведенных здесь примеров. Они не только проводят пользователей от начала до конца, но и представлены на многих языков. Конкретные примеры кода расположены в правую колонку, в то время как описательная часть раздела занимает среднюю колонку. Все шаги не сразу отображаются в разделе. При достижении одного конца шага, нужно нажать кнопку, чтобы показать следующий шаг. Такое постепенное раскрытие информации может уменьшить чувство страха, которое могут испытывать пользователи в начале работы.</p>

<p>Хотя средний столбец уже правого столбца, на самом деле средний столбец просто содержит повествовательный текст для аннотирования и пояснения кода. Если нажать кнопку в руководстве, то справа откроется код, размывая остальную часть экрана. Их реализация - технический подвиг, который редко где встретишь.</p>

<p><a name="mailchimp"></a></p>
<h3 id="mailchimp">Mailchimp</h3>

<figure><img class="docimage" src="images/conceptual-topic/39.png" alt="Mailchimp" /><figcaption>Коды Mailchimp</figcaption></figure>

<p>Как обычно, Mailchimp предоставляет полные описания своих продуктов. В разделе «Перед началом работы» перечислены все необходимые предварительные условия перед началом работы. Каждая часть раздела выделяется заголовками.</p>

<p>Выделение разделов заголовками более приемлемо, чем нумерованные списки (шаги). Большинство технических писателей используют нумерованные шаги в качестве привычки в технических документах, поэтому, когда они начинают писать описание кода, первое желание состоит в том, чтобы пронумеровать шаги. Но в разделе описания кода могут быть длинные примеры кода, за которыми следуют подробные объяснения и так далее. Ведение пронумерованных шагов может стать обременительным. Заголовки разделов обеспечивают менее проблематичное форматирование, и по-прежнему можно вводить заголовок каждого раздела с помощью «Шаг 1», «Шаг 2» и т.д.</p>

<p><a name="ibm"></a></p>
<h3 id="ibm-watson">IBM Watson</h3>

<figure><img class="docimage" src="images/conceptual-topic/40.png" alt="IBM Watson" /><figcaption>Коды IBM Watson</figcaption></figure>

<p>У IBM Watson описание отлично справляется с задачей, разбивая этапы на различные разделы с простыми шагами в каждом из. Предварительно в нем перечислены цели обучения, продолжительность и предпосылки. Нет ничего особенно сложного в форматировании или отображении - акцент делается на контент.</p>

<p><a name="sampleCode"></a></p>
<h2 id="пример-кода-для-api-прогноза-погоды">Пример кода для API прогноза погоды</h2>

<p>На этом курсе мы рассмотрели <a href="new-endpoint.html">каждый элемент адресной документации</a> для вымышленной конечной точки, называемой <code class="language-plaintext highlighter-rouge">surfreport</code>, в API сервиса прогноза погоды, с которым мы работали. Давайте вкратце вернемся к этому сценарию и предположим, что мы также хотим добавить описание кода для отображения отчета о серфинге на веб-странице. Как может выглядеть такое описание? Вот пример:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Code tutorial for `surfreport` endpoint
</code></pre></div></div>

<p>В примерах кода ниже показано, как использовать конечную точку <code class="language-plaintext highlighter-rouge">surfreport</code> для получения высоты прибоя для определенного пляжа.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://code.jquery.com/jquery-2.1.1.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script&gt;</span>
    <span class="c1">// ограничить параметр результат через дни, чтобы обеспечить легкость возвращаемого набора данных</span>
    <span class="kd">var</span> <span class="nx">settings</span> <span class="o">=</span> <span class="p">{</span>
      <span class="dl">"</span><span class="s2">async</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">crossDomain</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">url</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://api.openweathermap.org/surfreport/25&amp;days=1</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">method</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span>
    <span class="p">}</span>

    <span class="c1">// используйте метод ajax для разрешения асинхронных вызовов, которые не будут блокировать загрузку страницы</span>
    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="nx">settings</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
      <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#surfheight</span><span class="dl">"</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">surfreport</span><span class="p">.</span><span class="nx">conditions</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h2&gt;</span>Surf Height<span class="nt">&lt;/h2&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"surfheight"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>В этом примере используется метод <code class="language-plaintext highlighter-rouge">ajax</code> из jQuery, поскольку он позволяет асинхронно загружать удаленный ресурс.</p>

<p>В запросе мы отправляем авторизацию в URL строки запроса. Конечная точка ограничивает количество дней, возвращаемых к 1, для увеличения скорости загрузки.</p>

<p>В демонстрационных целях ответ присваивается аргументу <code class="language-plaintext highlighter-rouge">response</code> метода <code class="language-plaintext highlighter-rouge">done</code>, а затем записывается в тег <code class="language-plaintext highlighter-rouge">surfheight</code> на странице.</p>

<p>Мы получаем только высоту прибоя, но есть много других данных, которые можно выбрать для отображения.</p>

<p>Можно объяснить детали более подробно, даже построчно просматривая код, но здесь комментарии уже составляют примерно половину длины кода. Присутствуют комментарии и в самом коде. Комментарии больше относятся к вопросу «почему?», а не «что?».</p>

<p>Документирование кода может быть одним из самых сложных аспектов документации. Часть проблемы заключается в том, что код не организован таким образом, что построчное (или блочное) описание не имеет смысл. Переменные часто определяются в первую очередь, вызываются функции, которые определены в другом месте, да и многие другие аспекты также являются нелинейными. Объясняя логику, можно обнаружить, что приходится прыгать по разным местам кода, не обязательно перемещаясь сверху вниз.</p>

<blockquote>
  <p>Для более глубокого понимания того, как документировать примеры кода, см. презентацию автра курса<a href="https://idratherbewriting.com/2014/05/30/creating-code-samples-webinar-recording-slides-and-audio/"> «Создание примеров кода для документации API / SDK»</a>.</p>
</blockquote>

<p><a name="activity"></a></p>
<h2 id="-практическое-занятие-примеры-кода">👨‍💻 Практическое занятие: примеры кода</h2>

<p>В своем <a href="find-open-source-project.html">найденном опен-сорс проекте</a> найдем примеры кода в API документации. Ответим на следующие вопросы:</p>

<ol>
  <li>Есть ли примеры кода? На каких языках?</li>
  <li>Сколько примеров кода есть? Много? Немного? Ни одного?</li>
  <li>Есть ли комментарии внутри кода?</li>
  <li>Как концептуальные объяснения указывают на конкретные строки кода? Объяснение дается до, во время или после блоков кода?</li>
  <li>Сосредоточены ли объяснения кода на вопросе «почему?» (решения, лежащие в основе кода) или «что?» (механика кода)?</li>
</ol>

<p><a href="doc-strategy.html">🔙</a></p>

<p><a href="sample-apps.html">Go next ➡</a></p>


    <div class="tags">
        
    </div>




</div>

<hr class="shaded"/>

<footer>
            <div class="row">
                <div class="col-lg-12 footer">
               <!--&copy;2021 Tech writer. All rights reserved. <br />-->
<!--<span>Page last updated:</span> March 10, 2021<br/> Site last generated: Aug 24, 2021 <br />-->
<p><img src="images/company_logo.png" alt="Company logo"/></p>

<p><font color="grey">Logo designed by</font> <a href="https://www.instagram.com/olyaworkspace/">@Olyaworkspace</a></p>
                </div>
            </div>
</footer>


        </div>
    <!-- /.row -->
</div>
<!-- /.container -->
</div>
<!-- /#main -->
    </div>

</body>

</html>
